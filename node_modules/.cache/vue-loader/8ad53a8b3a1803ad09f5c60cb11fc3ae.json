{"remainingRequest":"/home/runner/work/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/src/views/Tema4.vue?vue&type=template&id=ff4e9416&lang=pug","dependencies":[{"path":"/home/runner/work/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/src/views/Tema4.vue","mtime":1732489472792},{"path":"/home/runner/work/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/CF3_228141_TEC_DESARROLLO_SOLUCIONES_INFORMATICAS_IA/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDQKICAgICAgaDEgUHJvdG90aXBhZG8gZGUgaW50ZXJmYWNlcwogICAgcC5tYi01KGRhdGEtYW9zPSdmYWRlLXJpZ2h0JykgRXN0ZSBhcGFydGFkbyBhYm9yZGEgZWwgZGlzZcOxbyB5IGRlc2Fycm9sbG8gZGUgaW50ZXJmYWNlcyBkZSB1c3VhcmlvIChVSSkgYSB0cmF2w6lzIGRlbCBwcm9jZXNvIGRlIHByb3RvdGlwYWRvLiBTZSBleHBsb3JhbiBjb25jZXB0b3MgY2xhdmUgY29tbyB1c2FiaWxpZGFkLCBhY2Nlc2liaWxpZGFkIHkgbGEgZXhwZXJpZW5jaWEgZGVsIHVzdWFyaW8gKFVYKS4gVGFtYmnDqW4gc2UgZXhwbGljYSBjw7NtbyB1dGlsaXphciBoZXJyYW1pZW50YXMgZGUgZGlzZcOxbyB5IHTDqWNuaWNhcyBkZSB2YWxpZGFjacOzbiBwYXJhIGNvbnN0cnVpciBpbnRlcmZhY2VzIHF1ZSBzZWFuIGludHVpdGl2YXMgeSBhdHJhY3RpdmFzLgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy0xMAogICAgICAgIC5wLTQoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNlNmYwZmMiKQogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKICAgICAgICAgICAgLmNvbC1sZy00Lm1iLWxnLTAubWItMwogICAgICAgICAgICAgIHAubWItMCBFcyBpbXBvcnRhbnRlIHRlbmVyIHByZXNlbnRlIHF1ZSBlbCBwcm9ww7NzaXRvIGRlIGxhIEludGVyZmF6IGRlIFVzdWFyaW8gKFVJKSBlcyBvcHRpbWl6YXIgeSBoYWNlciBtw6FzIGF0cmFjdGl2YSBsYSBpbnRlcmFjY2nDs24gZGVsIHVzdWFyaW8sIGVuZm9jYW5kbyBlbCBkaXNlw7FvIGVuIHN1cyBuZWNlc2lkYWRlcyB5IGV4cGVyaWVuY2lhcy4gUG9yIGVzdGEgcmF6w7NuLCBkaXNjaXBsaW5hcyBjb21vIGVsIERpc2XDsW8gR3LDoWZpY28geSBlbCBEaXNlw7FvIEluZHVzdHJpYWwgYXBsaWNhbiBzdXMgcHJpbmNpcGlvcyBwYXJhIGZhY2lsaXRhciBxdWUgbG9zIHVzdWFyaW9zIGNvbXByZW5kYW4geSBhcHJlbmRhbiByw6FwaWRhbWVudGUgZWwgdXNvIGRlIGxhcyBhcGxpY2FjaW9uZXMgeSBzaXN0ZW1hcy4gTGFzIGhlcnJhbWllbnRhcyBmdW5kYW1lbnRhbGVzIGVtcGxlYWRhcyBpbmNsdXllbiBlbGVtZW50b3MgZ3LDoWZpY29zLCBwaWN0b2dyYW1hcywgZXN0ZXJlb3RpcG9zIHkgc2ltYm9sb2fDrWEsIGFzZWd1cmFuZG8gcXVlIGxhIGVzdMOpdGljYSBubyBjb21wcm9tZXRhIGxhIGVmaWNpZW5jaWEgdMOpY25pY2EgbmkgZWwgcmVuZGltaWVudG8gb3BlcmF0aXZvIGRlbCBzaXN0ZW1hLgogICAgICAgICAgICAuY29sLWxnLTguY29sLTcKICAgICAgICAgICAgICAudGl0dWxvLXNleHRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8oZGF0YS1hb3M9J2ZhZGUtcmlnaHQnKQogICAgICAgICAgICAgICAgaDUgRmlndXJhIDIuCiAgICAgICAgICAgICAgICBzcGFuICBJbnRlcmZheiBkZSB1c3VhcmlvCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDkucG5nJywgYWx0PScnKQogICAgICAgICAgICAgIGZpZ2NhcHRpb24gRnVlbnRlOiBodHRwczovL3d3dy5lZmVjdG9kaWdpdGFsLm9ubGluZS9zaW5nbGUtcG9zdC8yMDE4LzA0LzE4L2Rpc2UlQzMlQjFvLWRlLWludGVyZmF6LWRlLXVzdWFyaW8tdWkKICAgIFNlcGFyYWRvcgogICAgI3RfNF8xLnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8oZGF0YS1hb3M9J2ZhZGUtcmlnaHQnKQogICAgICBoMiA0LjEJQ29uY2VwdG9zIGRlIHVzYWJpbGlkYWQgeSBleHBlcmllbmNpYSBkZSB1c3VhcmlvIChVWCkKICAgIC50aXR1bG8tdHJlczogaDMubWItMCBVc2FiaWxpZGFkCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTgubWItbGctMC5tYi0zCiAgICAgICAgcC5tYi0zIExhIHVzYWJpbGlkYWQgc2UgcmVmaWVyZSBhIHF1w6kgdGFuIGbDoWNpbCB5IGVmaWNpZW50ZSBlcyBwYXJhIGxvcyB1c3VhcmlvcyBpbnRlcmFjdHVhciBjb24gdW5hIGFwbGljYWNpw7NuIG8gc2lzdGVtYS4gVW5hIGludGVyZmF6IHVzYWJsZSBwZXJtaXRlIHF1ZSBsb3MgdXN1YXJpb3MgY29tcGxldGVuIHN1cyB0YXJlYXMgZGUgbWFuZXJhIHLDoXBpZGEgeSBzaW4gZXJyb3Jlcy4KICAgICAgICAucC00LnJvdW5kZWQtMyhzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2U2ZjBmYyAiKS5tYi0zCiAgICAgICAgICBoNSBQcmluY2lwaW9zIGRlIGxhIHVzYWJpbGlkYWQKICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICBwLm1iLTAgI1tiIEVmaWNpZW5jaWE6XSBlbCB1c3VhcmlvIGRlYmUgcG9kZXIgcmVhbGl6YXIgdGFyZWFzIGNvbiByYXBpZGV6LgogICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICBwLm1iLTAgI1tiIE1lbW9yYWJpbGlkYWQ6XSBsb3MgdXN1YXJpb3MgZGViZW4gcmVjb3JkYXIgZsOhY2lsbWVudGUgY8OzbW8gdXNhciBsYSBpbnRlcmZheiBkZXNwdcOpcyBkZSB1biB0aWVtcG8gc2luIGludGVyYWN0dWFyIGNvbiBlbGxhLgogICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICBwLm1iLTAgI1tiIEZhY2lsaWRhZCBkZSBhcHJlbmRpemFqZTpdIGxvcyBudWV2b3MgdXN1YXJpb3MgZGViZW4gYXByZW5kZXIgYSB1c2FyIGxhIGludGVyZmF6IGNvbiBwb2NvIGVzZnVlcnpvLgogICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICBwLm1iLTAgI1tiIFByZXZlbmNpw7NuIGRlIGVycm9yZXM6XSBsYSBpbnRlcmZheiBkZWJlIG1pbmltaXphciBsYXMgcG9zaWJpbGlkYWRlcyBkZSBxdWUgb2N1cnJhbiBlcnJvcmVzLCB5IGN1YW5kbyBvY3VycmFuLCBkZWJlIHBlcm1pdGlyIHF1ZSBzZSBzb2x1Y2lvbmVuIGbDoWNpbG1lbnRlLgogICAgICAgIHAubWItMCAjW2IgRWplbXBsbzpdIFVuIGZvcm11bGFyaW8gZGUgcmVnaXN0cm8gY29uIGluc3RydWNjaW9uZXMgY2xhcmFzLCB2YWxpZGFjacOzbiBlbiB0aWVtcG8gcmVhbCB5IHN1Z2VyZW5jaWFzIGRlIGNvcnJlY2Npw7NuIGRlIGVycm9yZXMgbWVqb3JhIGxhIHVzYWJpbGlkYWQgcG9ycXVlIHJlZHVjZSBsYSBmcnVzdHJhY2nDs24gZGVsIHVzdWFyaW8uCiAgICAgIC5jb2wtbGctNC5jb2wtNy5tYi1sZy0wLm1iLTM6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzUwLnBuZycsIGFsdD0nJykKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctNS5jb2wtNy5tYi1sZy0wLm1iLTM6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzUxLnBuZycsIGFsdD0nJykKICAgICAgLmNvbC1sZy03CiAgICAgICAgLnRpdHVsby10cmVzOiBoMy5tYi0wIEV4cGVyaWVuY2lhIGRlIHVzdWFyaW8gKFVYKQogICAgICAgIHAubWItMyBMYSBVWCBzZSByZWZpZXJlIGEgbGEgZXhwZXJpZW5jaWEgZ2VuZXJhbCBkZWwgdXN1YXJpbyBhbCBpbnRlcmFjdHVhciBjb24gdW5hIGFwbGljYWNpw7NuLCBpbmNsdXllbmRvIGFzcGVjdG9zIGVtb2Npb25hbGVzLCBwcsOhY3RpY29zIHkgZGUgc2F0aXNmYWNjacOzbi4KICAgICAgICAucC00LnJvdW5kZWQtMyhzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2NmZjhkZSIpLm1iLTMKICAgICAgICAgIGg1IEZhY3RvcmVzIHF1ZSBhZmVjdGFuIGxhIFVYCiAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgcC5tYi0wICNbYiBEaXNlw7FvIHZpc3VhbDpdIGVsIGF0cmFjdGl2byBlc3TDqXRpY28gZGUgbGEgaW50ZXJmYXogaW5mbHV5ZSBlbiBsYSBwZXJjZXBjacOzbiBkZWwgdXN1YXJpby4KICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgcC5tYi0wICNbYiBJbnRlcmFjdGl2aWRhZDpdIGxhIHJhcGlkZXogeSBsYSByZXNwdWVzdGEgZGUgbGEgYXBsaWNhY2nDs24gYW50ZSBsYXMgYWNjaW9uZXMgZGVsIHVzdWFyaW8uCiAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgIHAubWItMCAjW2IgQ29udGVuaWRvOl0gbGEgY2xhcmlkYWQgeSByZWxldmFuY2lhIGRlIGxhIGluZm9ybWFjacOzbiBwcmVzZW50YWRhLgogICAgICAgIHAubWItNCAjW2IgRWplbXBsbzpdIHBpZW5zYSBlbiB1bmEgYXBsaWNhY2nDs24gZGUgYmFuY2EgbcOzdmlsLiBVbmEgYnVlbmEgVVggc2lnbmlmaWNhIHF1ZSBsb3MgdXN1YXJpb3MgcHVlZGVuIGNvbnN1bHRhciBzdSBzYWxkbyB5IHRyYW5zZmVyaXIgZGluZXJvIGNvbiB1bm9zIHBvY29zIHRvcXVlcywgeSBxdWUgc2Ugc2llbnRhbiBzZWd1cm9zIHkgc2F0aXNmZWNob3MgbWllbnRyYXMgbG8gaGFjZW4uCiAgICBTZXBhcmFkb3IKICAgICN0XzRfMi50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvKGRhdGEtYW9zPSdmYWRlLXJpZ2h0JykKICAgICAgaDIgNC4yCVTDqWNuaWNhcyB5IGhlcnJhbWllbnRhcyBkZSBwcm90b3RpcGFkbwogICAgVGFic0MuY29sb3ItYWNlbnRvLWNvbnRlbmlkby5tYi01CiAgICAgIC5weS00LnB5LW1kLTUodGl0dWxvPSJUw6ljbmljYXMgZGUgcHJvdG90aXBhZG8iKQogICAgICAgIC5yb3cKICAgICAgICAgIC5jb2wtbGctNi5tYi00Lm1iLWxnLTA6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzUyLnBuZycsIGFsdD0nJykKICAgICAgICAgIC5jb2wtbGctNgogICAgICAgICAgICBoNCBUw6ljbmljYXMgZGUgcHJvdG90aXBhZG8KICAgICAgICAgICAgcCBMb3MgcHJvdG90aXBvcyBwdWVkZW4gc2VyIGRlIGJhamEsIG1lZGlhIG8gYWx0YSBmaWRlbGlkYWQsIGRlcGVuZGllbmRvIGRlIGN1w6FudG8gZGV0YWxsZSBzZSBkZXNlZSBpbmNsdWlyIGVuIGxhIGZhc2UgZGUgZGlzZcOxby4KICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCAjW2IgUHJvdG90aXBvcyBkZSBiYWphIGZpZGVsaWRhZDpdIGRpYnVqb3Mgc2ltcGxlcyBvIGJvY2V0b3MgZW4gcGFwZWwgcXVlIHJlcHJlc2VudGFuIGxhIGVzdHJ1Y3R1cmEgYsOhc2ljYSBkZSBsYSBpbnRlcmZhei4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wICNbYiBQcm90b3RpcG9zIGRlIG1lZGlhIGZpZGVsaWRhZDpdIG1vY2t1cHMgZGlnaXRhbGVzIHF1ZSBtdWVzdHJhbiBtw6FzIGRldGFsbGVzLCBjb21vIGxhIGRpc3Bvc2ljacOzbiBkZSBsb3MgZWxlbWVudG9zIHkgYWxndW5vcyBlc3RpbG9zLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgI1tiIFByb3RvdGlwb3MgZGUgYWx0YSBmaWRlbGlkYWQ6XSByZXByZXNlbnRhY2lvbmVzIGNhc2kgY29tcGxldGFzIGRlIGxhIGFwbGljYWNpw7NuLCBjb24gY29sb3JlcywgaW3DoWdlbmVzIHkgZnVuY2lvbmFsaWRhZCBzaW11bGFkYS4KICAgICAgICAgICAgcC5tYi0wICNbYiBFamVtcGxvOl0gdW4gZGlzZcOxYWRvciBwdWVkZSBjb21lbnphciBjb24gdW4gYm9jZXRvIGVuIHBhcGVsIGRlIHVuYSBww6FnaW5hIGRlIGluaWNpbyBkZSB1bmEgYXBsaWNhY2nDs24geSBsdWVnbyBjcmVhciB1biBwcm90b3RpcG8gZGUgYWx0YSBmaWRlbGlkYWQgZW4gaGVycmFtaWVudGFzIGNvbW8gRmlnbWEgbyBBZG9iZSBYRC4KICAgICAgLnB5LTQucHktbWQtNSh0aXR1bG89IkhlcnJhbWllbnRhcyBkZSBwcm90b3RpcGFkbyIpCiAgICAgICAgLnJvdwogICAgICAgICAgLmNvbC1sZy02Lm1iLTQubWItbGctMDogaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNTMucG5nJywgYWx0PScnKQogICAgICAgICAgLmNvbC1sZy02CiAgICAgICAgICAgIGg0IEhlcnJhbWllbnRhcyBkZSBwcm90b3RpcGFkbwogICAgICAgICAgICBwIEV4aXN0ZW4gdmFyaWFzIGhlcnJhbWllbnRhcyBwYXJhIGRpc2XDsWFyIHkgcHJvYmFyIHByb3RvdGlwb3M6CiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgI1tiIEZpZ21hOl0gcGVybWl0ZSBjb2xhYm9yYXIgZW4gdGllbXBvIHJlYWwgeSBjcmVhciBwcm90b3RpcG9zIGludGVyYWN0aXZvcy4KCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCAjW2IgU2tldGNoOl0gcG9wdWxhciBlbnRyZSBsb3MgZGlzZcOxYWRvcmVzIGRlIFVJIHBhcmEgY3JlYXIgaW50ZXJmYWNlcyBkZXRhbGxhZGFzLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgI1tiIEFkb2JlIFhEOl0gb2ZyZWNlIGludGVncmFjacOzbiBjb24gb3Ryb3MgcHJvZHVjdG9zIGRlIEFkb2JlIHkgZnVuY2lvbmFsaWRhZGVzIHBhcmEgcHJvdG90aXBhZG8gaW50ZXJhY3Rpdm8uCiAgICAgICAgICAgIHAubWItMCAjW2IgRWplbXBsbzpdIHVuIGRpc2XDsWFkb3IgcHVlZGUgdXNhciBGaWdtYSBwYXJhIGNyZWFyIHVuIHByb3RvdGlwbyBkZSB1bmEgYXBsaWNhY2nDs24gZGUgY2FsZW5kYXJpbywgY29uIGludGVyYWNjaW9uZXMgcXVlIHNpbXVsZW4gY8OzbW8gc2UgYWdyZWdhcsOtYW4geSBlbGltaW5hcsOtYW4gZXZlbnRvcy4gCiAgICBTZXBhcmFkb3IKICAgICN0XzRfMy50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvKGRhdGEtYW9zPSdmYWRlLXJpZ2h0JykKICAgICAgaDIgNC4zCURpc2XDsW8gZGUgbGEgaW50ZXJmYXogZ3LDoWZpY2EgZGUgdXN1YXJpbwogICAgLnRpdHVsby10cmVzOiBoMy5tYi0wIEVsZW1lbnRvcyBkZSB1bmEgaW50ZXJmYXogZ3LDoWZpY2EgZGUgdXN1YXJpbyAoR1VJKQogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy0zLm1iLWxnLTAubWItMwogICAgICAgIC5wLTQuaC0xMDAoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNlZGU5ZWMiKQogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgICAgICAgLmNvbC00OiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy81NC5zdmcnLCBhbHQ9JycpCiAgICAgICAgICAudGV4dC1jZW50ZXIKICAgICAgICAgICAgaDUgQm90b25lcwogICAgICAgICAgICBwLm1iLTAgRGViZW4gc2VyIGludHVpdGl2b3MgeSB0ZW5lciBldGlxdWV0YXMgY2xhcmFzIHF1ZSBkZXNjcmliYW4gc3UgZnVuY2nDs24uCiAgICAgIC5jb2wtbGctMy5tYi1sZy0wLm1iLTMKICAgICAgICAucC00LmgtMTAwKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZWRlOWVjIikKICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi00CiAgICAgICAgICAgIC5jb2wtNDogaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNTUuc3ZnJywgYWx0PScnKQogICAgICAgICAgLnRleHQtY2VudGVyCiAgICAgICAgICAgIGg1IENhbXBvcyBkZSBlbnRyYWRhCiAgICAgICAgICAgIHAubWItMCBMb3MgdXN1YXJpb3MgZGViZW4gcG9kZXIgaW5ncmVzYXIgZGF0b3MgZGUgbWFuZXJhIHNlbmNpbGxhLCBjb24gdmFsaWRhY2lvbmVzIHF1ZSBldml0ZW4gZXJyb3Jlcy4KICAgICAgLmNvbC1sZy0zLm1iLWxnLTAubWItMwogICAgICAgIC5wLTQuaC0xMDAoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNlZGU5ZWMiKQogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgICAgICAgLmNvbC00OiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy81Ni5zdmcnLCBhbHQ9JycpCiAgICAgICAgICAudGV4dC1jZW50ZXIKICAgICAgICAgICAgaDUgTWVuw7pzIHkgbmF2ZWdhY2nDs24gCiAgICAgICAgICAgIHAubWItMCBEZWJlbiBzZXIgc2ltcGxlcyB5IGzDs2dpY29zIHBhcmEgZmFjaWxpdGFyIGxhIGLDunNxdWVkYSBkZSBmdW5jaW9uZXMgeSBjb250ZW5pZG9zLgogICAgICAuY29sLWxnLTMubWItbGctMC5tYi0zCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgICAgIC5jb2wtMTA6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzU3LnN2ZycsIGFsdD0nJykKICAgICAgICBwLm1iLTAgI1tiIEVqZW1wbG86XSBlbiB1bmEgYXBsaWNhY2nDs24gZGUgcGVkaWRvcyBkZSBjb21pZGEsIGxhIHBhbnRhbGxhIGRlIGluaWNpbyBwdWVkZSB0ZW5lciBib3RvbmVzIHBhcmEgYnVzY2FyIHJlc3RhdXJhbnRlcywgcmV2aXNhciBlbCBjYXJyaXRvIHkgdmVyIGVsIGhpc3RvcmlhbCBkZSBwZWRpZG9zLiBMYSBuYXZlZ2FjacOzbiBkZWJlIHNlciBjbGFyYSBwYXJhIHF1ZSBsb3MgdXN1YXJpb3MgcHVlZGFuIGFjY2VkZXIgcsOhcGlkYW1lbnRlIGEgbG8gcXVlIG5lY2VzaXRhbi4KICAgIC50aXR1bG8tdHJlczogaDMubWItMCBQcmluY2lwaW9zIGRlIGRpc2XDsW8gdmlzdWFsCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTMubWItbGctMC5tYi0zCiAgICAgICAgLnAtNC5oLTEwMChzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2VkZTllYyIpCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNAogICAgICAgICAgICAuY29sLTQ6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzU4LnN2ZycsIGFsdD0nJykKICAgICAgICAgIC50ZXh0LWNlbnRlcgogICAgICAgICAgICBoNSBDb25zaXN0ZW5jaWEKICAgICAgICAgICAgcC5tYi0wIExvcyBlbGVtZW50b3MgZGUgbGEgaW50ZXJmYXogZGViZW4gc2VndWlyIHVuIGRpc2XDsW8gY29oZXJlbnRlLCBjb21vIGVsIHVzbyBkZSBjb2xvcmVzIHkgdGlwb2dyYWbDrWFzIHNpbWlsYXJlcyBlbiB0b2RhcyBsYXMgcGFudGFsbGFzLgogICAgICAuY29sLWxnLTMubWItbGctMC5tYi0zCiAgICAgICAgLnAtNC5oLTEwMChzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2VkZTllYyIpCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNAogICAgICAgICAgICAuY29sLTQ6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzU5LnN2ZycsIGFsdD0nJykKICAgICAgICAgIC50ZXh0LWNlbnRlcgogICAgICAgICAgICBoNSBKZXJhcnF1w61hIHZpc3VhbAogICAgICAgICAgICBwLm1iLTAgTG9zIGVsZW1lbnRvcyBtw6FzIGltcG9ydGFudGVzIGRlYmVuIGRlc3RhY2Fyc2UgbWVkaWFudGUgZWwgdGFtYcOxbywgZWwgY29sb3IgbyBsYSB1YmljYWNpw7NuLgogICAgICAuY29sLWxnLTMubWItbGctMC5tYi0zCiAgICAgICAgLnAtNC5oLTEwMChzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2VkZTllYyIpCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNAogICAgICAgICAgICAuY29sLTQ6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzYwLnN2ZycsIGFsdD0nJykKICAgICAgICAgIC50ZXh0LWNlbnRlcgogICAgICAgICAgICBoNSBFc3BhY2lhZG8KICAgICAgICAgICAgcC5tYi0wIFVuIGJ1ZW4gdXNvIGRlbCBlc3BhY2lvIGVuIGJsYW5jbyBheXVkYSBhIHF1ZSBsYSBpbnRlcmZheiBzZWEgbcOhcyBsZWdpYmxlIHkgYXRyYWN0aXZhLgogICAgICAuY29sLWxnLTMubWItbGctMC5tYi0zCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgICAgIC5jb2wtMTA6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzYxLnN2ZycsIGFsdD0nJykKICAgICAgICBwLm1iLTAgI1tiIEVqZW1wbG86XSBlbiB1bmEgYXBsaWNhY2nDs24gZGUgbm90aWNpYXMsIGxvcyB0aXR1bGFyZXMgZGViZW4gc2VyIG3DoXMgZ3JhbmRlcyB5IGVzdGFyIGVuIG5lZ3JpdGEsIG1pZW50cmFzIHF1ZSBsYXMgZGVzY3JpcGNpb25lcyBwdWVkZW4gdGVuZXIgdW4gdGFtYcOxbyBkZSBmdWVudGUgbWVub3IgeSB1biBjb2xvciBtw6FzIHRlbnVlLgogICAgU2VwYXJhZG9yCiAgICAjdF80XzQudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbyhkYXRhLWFvcz0nZmFkZS1yaWdodCcpCiAgICAgIGgyIDQuNAlBcGxpY2FjacOzbiBkZSB0w6ljbmljYXMgZGUgdXNhYmlsaWRhZAogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctMy5jb2wtNy5tYi1sZy0wLm1iLTM6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzYyLnBuZycsIGFsdD0nJykKICAgICAgLmNvbC1sZy05CiAgICAgICAgLnRpdHVsby10cmVzOiBoMy5tYi0wIFBydWViYXMgZGUgdXNhYmlsaWRhZAogICAgICAgIHAubWItMCBTZSByZWFsaXphbiBwYXJhIGV2YWx1YXIgY8OzbW8gaW50ZXJhY3TDumFuIGxvcyB1c3VhcmlvcyBjb24gbGEgYXBsaWNhY2nDs24geSBwYXJhIGlkZW50aWZpY2FyIHByb2JsZW1hcy4gTGFzIHBydWViYXMgcHVlZGVuIHNlciByZWFsaXphZGFzIGNvbiBwcm90b3RpcG9zIGFudGVzIGRlIGxhIGltcGxlbWVudGFjacOzbiBmaW5hbC4KICAgICAgICAgIGJyCiAgICAgICAgICBicgogICAgICAgICAgfCAjW2IgRWplbXBsbzpdIHVuIGdydXBvIGRlIHVzdWFyaW9zIHBydWViYSB1biBwcm90b3RpcG8gZGUgdW5hIGFwbGljYWNpw7NuIGRlIG1lbnNhamVyw61hIHkgcHJvcG9yY2lvbmEgcmV0cm9hbGltZW50YWNpw7NuIHNvYnJlIGxhIGZhY2lsaWRhZCBkZSBlbnZpYXIgbWVuc2FqZXMgbyBhZGp1bnRhciBhcmNoaXZvcy4KICAgIC50aXR1bG8tdHJlczogaDMubWItMCBIZXVyw61zdGljYXMgZGUgdXNhYmlsaWRhZAogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctOC5tYi1sZy0wLm1iLTMKICAgICAgICBwLm1iLTMgU29uIHByaW5jaXBpb3MgZXN0YWJsZWNpZG9zIHBhcmEgZXZhbHVhciB5IG1lam9yYXIgbGEgdXNhYmlsaWRhZCBkZSB1biBkaXNlw7FvLiBBbGd1bmFzIGRlIGxhcyBtw6FzIGNvbm9jaWRhcyBzb24gbGFzIGhldXLDrXN0aWNhcyBkZSBOaWVsc2VuLCBjb21vOgogICAgICAgIC5wLTQucm91bmRlZC0zKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZTZmMGZjICIpLm1iLTMKICAgICAgICAgIGg1IFByaW5jaXBpb3MgZGUgbGEgdXNhYmlsaWRhZAogICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgIHAubWItMCAjW2IgVmlzaWJpbGlkYWQgZGVsIGVzdGFkbyBkZWwgc2lzdGVtYTpdIGluZm9ybWFyIGFsIHVzdWFyaW8gc29icmUgbG8gcXVlIGVzdMOhIHN1Y2VkaWVuZG8gbWVkaWFudGUgbWVuc2FqZXMgbyBpbmRpY2Fkb3Jlcy4KICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgcC5tYi0wICNbYiBDb250cm9sIHkgbGliZXJ0YWQgZGVsIHVzdWFyaW86XSBwZXJtaXRpciBhIGxvcyB1c3VhcmlvcyBkZXNoYWNlciB5IHJlaGFjZXIgYWNjaW9uZXMuCiAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgIHAubWItMCAjW2IgUHJldmVuY2nDs24gZGUgZXJyb3JlczpdIGV2aXRhciBxdWUgb2N1cnJhbiBlcnJvcmVzIG1lZGlhbnRlIHVuIGRpc2XDsW8gYWRlY3VhZG8geSBwcm9wb3JjaW9uYXIgbWVuc2FqZXMgY2xhcm9zIHNpIG9jdXJyZW4uCiAgICAgICAgcC5tYi0wICNbYiBFamVtcGxvOl0gdW5hIGFwbGljYWNpw7NuIGRlIGNvbXByYXMgZW4gbMOtbmVhIG11ZXN0cmEgdW4gbWVuc2FqZSBkZSBjb25maXJtYWNpw7NuIGFudGVzIGRlIHJlYWxpemFyIHVuIHBhZ28sIHBlcm1pdGllbmRvIGFsIHVzdWFyaW8gY2FuY2VsYXIgc2kgY29tZXRpw7MgdW4gZXJyb3IuCiAgICAgIC5jb2wtbGctNC5jb2wtNy5tYi1sZy0wLm1iLTM6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzYzLnN2ZycsIGFsdD0nJykKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctMi5kLW5vbmUuZC1sZy1ibG9jazogaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNjQucG5nJywgYWx0PScnKQogICAgICAuY29sLWxnLTgKICAgICAgICAucm91bmRlZC0zLnAtNChzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0VERTlFQyAiKQogICAgICAgICAgLnRpdHVsby10cmVzOiBoMy5tYi0wIEFjY2VzaWJpbGlkYWQKICAgICAgICAgIHAgQXNlZ3VyYXJzZSBkZSBxdWUgbGEgYXBsaWNhY2nDs24gc2VhIHV0aWxpemFibGUgcG9yIHBlcnNvbmFzIGNvbiBkaXNjYXBhY2lkYWRlcy4gRXN0byBpbmNsdXllIHNvcG9ydGUgcGFyYSBsZWN0b3JlcyBkZSBwYW50YWxsYSwgdGVjbGFzIGRlIGFjY2VzbyByw6FwaWRvIHkgY29udHJhc3RlIGFkZWN1YWRvIHBhcmEgcGVyc29uYXMgY29uIHByb2JsZW1hcyBkZSB2aXNpw7NuLgogICAgICAgICAgICBicgogICAgICAgICAgICBicgogICAgICAgICAgICB8I1tiIEVqZW1wbG86XSB1bmEgYXBsaWNhY2nDs24gZGUgbGVjdHVyYSBkZSBub3RpY2lhcyBwZXJtaXRlIGNhbWJpYXIgZWwgdGFtYcOxbyBkZSBsYSBmdWVudGUgeSB0aWVuZSB1biBtb2RvIGRlIGFsdG8gY29udHJhc3RlIHBhcmEgbWVqb3JhciBsYSBsZWdpYmlsaWRhZC4KICAgIFNlcGFyYWRvcgogICAgI3RfNF81LnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8oZGF0YS1hb3M9J2ZhZGUtcmlnaHQnKQogICAgICBoMiA0LjUJUGF0cm9uZXMgZGUgaW50ZXJhY2Npw7NuIHkgZGlzZcOxbyB2aXN1YWwKICAgIFRhYnNDLmNvbG9yLWFjZW50by1jb250ZW5pZG8ubWItNQogICAgICAucHktNC5weS1tZC01KHRpdHVsbz0iUGF0cm9uZXMgZGUgaW50ZXJhY2Npw7NuIikKICAgICAgICAucm93CiAgICAgICAgICAuY29sLWxnLTYubWItNC5tYi1sZy0wOiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy82Ny5wbmcnLCBhbHQ9JycpCiAgICAgICAgICAuY29sLWxnLTYKICAgICAgICAgICAgaDQgUGF0cm9uZXMgZGUgaW50ZXJhY2Npw7NuCiAgICAgICAgICAgIHAgTG9zIHBhdHJvbmVzIGRlIGludGVyYWNjacOzbiBzb24gc29sdWNpb25lcyBjb211bmVzIGEgcHJvYmxlbWFzIHJlY3VycmVudGVzIGVuIGVsIGRpc2XDsW8gZGUgaW50ZXJmYWNlcy4gQWxndW5vcyBlamVtcGxvcyBpbmNsdXllbjoKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLm1zLTQKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wICNbYiBNZW7DunMgZGVzcGxlZ2FibGVzOl0gdXRpbGl6YWRvcyBwYXJhIGFob3JyYXIgZXNwYWNpbyB5IG1vc3RyYXIgb3BjaW9uZXMgYWRpY2lvbmFsZXMgc29sbyBjdWFuZG8gZWwgdXN1YXJpbyBsbyBuZWNlc2l0YS4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wICNbYiBBcnJhc3RyYXIgeSBzb2x0YXI6XSBmYWNpbGl0YSBsYSBvcmdhbml6YWNpw7NuIGRlIGVsZW1lbnRvcywgY29tbyBtb3ZlciBhcmNoaXZvcyBlbiB1bmEgY2FycGV0YS4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wICNbYiBNb2RhbGlkYWRlczpdIHZlbnRhbmFzIGVtZXJnZW50ZXMgcXVlIHJlcXVpZXJlbiBsYSBhdGVuY2nDs24gZGVsIHVzdWFyaW8sIGNvbW8gbGFzIGNvbmZpcm1hY2lvbmVzIGRlIGVsaW1pbmFjacOzbi4KICAgICAgICAgICAgcC5tYi0wIEVqZW1wbG86IHVuIHRhYmxlcm8gS2FuYmFuIGVuIHVuYSBhcGxpY2FjacOzbiBkZSBnZXN0acOzbiBkZSBwcm95ZWN0b3MgdXNhIGVsIHBhdHLDs24gZGUgYXJyYXN0cmFyIHkgc29sdGFyIHBhcmEgbW92ZXIgdGFyZWFzIGVudHJlIGRpZmVyZW50ZXMgY29sdW1uYXMuCiAgICAgIC5weS00LnB5LW1kLTUodGl0dWxvPSJQcmluY2lwaW9zIGRlIGRpc2XDsW8gdmlzdWFsIikKICAgICAgICAucm93CiAgICAgICAgICAuY29sLWxnLTYubWItNC5tYi1sZy0wOiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy82OC5wbmcnLCBhbHQ9JycpCiAgICAgICAgICAuY29sLWxnLTYKICAgICAgICAgICAgaDQgUHJpbmNpcGlvcyBkZSBkaXNlw7FvIHZpc3VhbAogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IubXMtNAogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgI1tiIENvbnRyYXN0ZTpdIHVzYXIgY29sb3JlcyBjb250cmFzdGFudGVzIHBhcmEgZGVzdGFjYXIgZWxlbWVudG9zIGltcG9ydGFudGVzLCBjb21vIGJvdG9uZXMgZGUgYWNjacOzbi4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wICNbYiBBbGluZWFjacOzbjpdIGFsaW5lYXIgZWxlbWVudG9zIHBhcmEgcXVlIGxhIGludGVyZmF6IHNlIHZlYSBvcmdhbml6YWRhIHkgcHJvZmVzaW9uYWwuCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCAjW2IgUHJveGltaWRhZDpdIGNvbG9jYXIgZWxlbWVudG9zIHJlbGFjaW9uYWRvcyBjZXJjYSB1bm9zIGRlIG90cm9zIHBhcmEgcXVlIGVsIHVzdWFyaW8gZW50aWVuZGEgc3UgcmVsYWNpw7NuLgogICAgICAgICAgICBwICNbYiBFamVtcGxvOl0gZW4gdW5hIGFwbGljYWNpw7NuIGRlIGZpbmFuemFzLCBsb3MgaW5ncmVzb3MgeSBnYXN0b3Mgc2UgbXVlc3RyYW4gY29uIGNvbG9yZXMgY29udHJhc3RhbnRlcyAodmVyZGUgcGFyYSBpbmdyZXNvcyB5IHJvam8gcGFyYSBnYXN0b3MpLCB5IGxvcyBncsOhZmljb3MgZXN0w6FuIGFsaW5lYWRvcyBkZSBtYW5lcmEgb3JkZW5hZGEuCgoKCgoKCgo="},null]}